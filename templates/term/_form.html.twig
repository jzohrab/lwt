{% form_theme form 'form_table_layout.html.twig' %}

{{ form_start(form) }}

<table id="term">

  {#
    Using jquery to hide the lang. dropdown if it's set.
    I tried using various twig checks (defined, is null, etc)
  but kept getting exceptions.
  #}
  <tr id="languageSel">
    <td>Language</td>
    <td>{{ form_widget(form.language) }}</td>
  </tr>

  <tr>
    <td>Term</td>
    <td>{{ form_widget(form.Text) }}</td>
    <td><img src="/icn/external.png" title="Lookup" /></td>
  </tr>

  {{ form_row(form.ParentText) }}
  {{ form_row(form.Romanization) }}
  {{ form_row(form.Translation) }}
  {{ form_row(form.Status) }}

  <tr>
    <td>Sentence</td>
    <td>{{ form_widget(form.Sentence) }}</td>
    <td><img src="/icn/external.png" title="Lookup" /></td>
  </tr>

  {% do form.termTags.setRendered %}
  {# manually write list so it can be managed by tagit. #}
  <tr>
    <td>Tags</td>
    <td>
      <ul id="termtagslist" class="tags nomarginblock">
        {% for termTag in form.termTags %}
        <li>
          {{ termTag.vars.value.text }}
        </li>
        {% endfor %}
      </ul>
    </td>
  </tr>

</table>

<button class="btn">{{ button_label|default('Save') }}</button>

<input name="posttoblank" type="hidden" value="{{ posttoblank ?? 'no' }}">

{{ form_end(form) }}

<script type="text/javascript">
  
  let set_parent_fields = function(event, ui) {
    $('#term_ParentText').val(ui.item.word);
    return false;
  };
  
  let set_up_parent_autocomplete = function() {
    $("#term_ParentText").autocomplete({
      source: function(request, response) {
        const s = encodeURIComponent(request.term);
        const langid = parseInt($('#term_language').val());
        $.ajax({
          url: `/term/search/${s}/${langid}`,
          type: 'GET',
          dataType: 'json',
          success: function(data) {
            const arr = [];
            for (const [wordid, word] of Object.entries(data)) {
              let label = word.text;
              if (word.translation != null && word.translation != '') {
                label = `${label} (${word.translation})`;
              }
              const obj = {
                label: label,
                value: wordid,
                word: word.text,
                translation: word.translation
              };
              arr.push(obj);
            };
            response(arr, data);
          }
        })
      },
      select: set_parent_fields,
      focus: set_parent_fields,
      change: set_parent_fields
    });
  };

  let showHideLanguageSelector = function() {
    const langid = parseInt($('#term_language').val());
    if (langid > 0) {
      $('#languageSel').hide();
    }
  }
    
  let setupTagit = function() {
    var prototypeFieldName = 'term[termTags][__name__][text]';
    var fieldIndex = 0;
    
    let invalidChar = function(s) { return /[\uD800-\uDFFF]/.test(s); };

    $('#termtagslist').tagit(
      {
        beforeTagAdded: function (_event, ui) {
          if (invalidChar(ui.tag.text())) {
            return;
          }
          fieldIndex++;
          $(this).tagit({fieldName: prototypeFieldName.replace('__name__', fieldIndex)});
        },
        availableTags: TAGS,
        fieldName: 'term[termTags][0][text]'
      });

  };

  let handleAutofocus = function() {
    const wordfield = $('#wordfield');
    const transfield = $('#translationfield');

    if ($('#autofocus').val() != 'false') {
      if (wordfield.val()) {
        transfield.focus();
      }
      else {
        wordfield.focus();
      }
    }

  }
  $(document).ready(function () {
    showHideLanguageSelector()
    setupTagit();
    // TODO - activate this
    // handleAutofocus();
    set_up_parent_autocomplete();

    // Approx good size for the text area:
    const w = $('#term_Text').css('width');
    // Textareas seem to have their own dimensional quirks.
    const hackTextareaWidth = parseInt(parseInt(w) * 1.10);
    $('#term_Translation').css({'width': `${hackTextareaWidth}px`, 'height': '43px'});
  });

</script>
